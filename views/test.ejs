<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Project Manager Timeline</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
    }
    .chartMenu {
      width: 100vw;
      height: 40px;
      background: #1A1A1A;
      color: rgba(54, 162, 235, 1);
    }
    .chartCard {
      width: 100vw;
      height: calc(100vh);
      background: rgba(54, 162, 235, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .chartBox {
      width: 70%;
      padding: 20px;
      margin-left: 2%;
      border-radius: 20px;
      border: solid 3px rgb(0, 0, 0);
      background: white;
    }
    .dropdown {
      min-width: 15em;
      position: relative;
      margin: 2em;
    }
    .dropdown * {
      box-sizing: border-box;
    }
    .select {
      background: #2a2f3b;
      color: #fff;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: 2px #2a2f3b solid;
      border-radius: 0.5em;
      padding: 1em;
      cursor: pointer;
      transition: 0.3s;
    }
    .select-clicked {
      border: 2px #26489a solid;
      box-shadow: 0 0 0.8em #26489a;
    }
    .select:hover {
      background: #323741;
    }
    .caret {
      width: 0;
      height: 0;
      border-left: 5px solid transparent;
      border-right: 5px solid transparent;
      border-top: 6px solid #fff;
      transition: 0.3s;
    }
    .caret-rotate {
      transform: rotate(180deg);
    }
    .menu {
      list-style: none;
      padding: 0.2em 0.5em;
      background: #323741;
      border: 1px #363a43 solid;
      box-shadow: 0 0.5em  1em rgba(0,0,0,0.2);
      border-radius: 0.5em;
      color: #9fa5b5;
      position: absolute;
      top: 3.5em;
      left: 50%;
      width: 100%;
      transform: translateX(-50%);
      opacity: 0;
      display: none;
      transition: 0.2s;
      z-index: 1;
    }
    .menu li {
      padding: 0.7em 0.5em;
      margin: 0.3em 0;
      border-radius: 0.5em;
      cursor: pointer;
    }
    .menu li:hover {
      background: #2a2d35;
    }
    .active {
      background: #23242a;
    }
    .menu-open {
      display: block;
      opacity: 1;
    }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" integrity="sha512-5A8nwdMOWrSz20fDsjczgUidUBR8liPYU+WymTZP1lmY9G6Oc7HlZv156XqnsgNUzTyMefFTcsFH/tnJE/+xBg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>

  <div class="chartCard">
    <div class="dropdown">
      <div class="select">
        <span class="selected">Project #1</span>
        <div class="caret"></div>
      </div>
      <ul class="menu">
        <!-- <li class="active">Project #1</li>
        <li>Project #2</li>
        <li>Project #3</li> -->
      </ul>
    </div>
    <div class="chartBox">
      <canvas id="myChart"></canvas>
    </div>
  </div>
  
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>  
  <script>
    const projects = JSON.parse('<%- JSON.stringify(projects) %>');
    let globalTasksArray = projects[0];

    const dropdown = document.querySelector('.dropdown');
    const select = dropdown.querySelector('.select');
    const caret = dropdown.querySelector('.caret');
    const menu = dropdown.querySelector('.menu');
    const selected = dropdown.querySelector('.selected');

    select.addEventListener('click', () => {
      select.classList.toggle('select-clicked');
      caret.classList.toggle('caret-rotate');
      menu.classList.toggle('menu-open');
    });

    projects.forEach((project, index) => {
      const li = document.createElement('li');
      li.innerText = `Project #${index + 1}`;

      if(index==0){
        li.classList.add('active');
      }

      li.addEventListener('click', () => {
        selected.innerText = li.innerText;
        select.classList.remove('select-clicked');
        caret.classList.remove('caret-rotate');
        menu.classList.remove('menu-open');

        globalTasksArray = projects[index];

        let options = dropdown.querySelectorAll('.menu li');

        options.forEach(opt => {
          opt.classList.remove('active');
        });
        li.classList.add('active');

        // Call chartupdate to update the chart with the new data
        chartupdate();
      });

      menu.appendChild(li);
    });
    // options.forEach((option, index) => {
    //   option.addEventListener('click', () => {
    //     selected.innerText = option.innerText;
    //     select.classList.remove('select-clicked');
    //     caret.classList.remove('caret-rotate');
    //     menu.classList.remove('menu-open');

    //     globalTasksArray = projects[index];

    //     options.forEach(opt => {
    //       opt.classList.remove('active');
    //     });
    //     option.classList.add('active');

    //     // Call chartupdate to update the chart with the new data
    //     chartupdate();
    //   });
    // });

    const colours = ['rgba(255, 26, 104, 1)', 'rgba(255, 159, 64, 1)', 'rgba(75, 192, 192, 1)'];

    const data = {
      datasets: [{
        label: 'Task Timeline',
        data: [],
        backgroundColor: [],
        borderWidth: 1,
        borderSkipped: false,
        borderRadius: 12,
        barPercentage: 0.5
      }]
    };

    const currentday = {
      id: 'currentday',
      afterDatasetsDraw(chart, args, pluginOptions) {
        const {ctx, data, chartArea: {top, bottom, left, right}, scales: {x, y}} = chart;
        ctx.save();
        ctx.beginPath();
        ctx.lineWidth = 3;
        ctx.strokeStyle = 'rgba(1, 1, 122, 1)';
        ctx.setLineDash([6,6]);
        ctx.moveTo(x.getPixelForValue(new Date()), top);
        ctx.lineTo(x.getPixelForValue(new Date()), bottom);
        ctx.stroke();
        ctx.setLineDash([]);
      }
    };

    const assignedName = {
      id: 'assignedName',
      afterDatasetsDraw(chart, args, pluginOptions) {
        const {ctx, data, chartArea: {top, bottom, left, right}, scales: {x, y}} = chart;
        ctx.font = 'bolder 12px sans-serif';
        ctx.fillStyle = 'navy';
        ctx.textBaseline = 'middle';
        data.datasets[0].data.forEach((Tasks, index) => {
          ctx.fillText(Tasks.name, 10, y.getPixelForValue(index));
        });
      }
    };

    const taskStatus = {
      id: 'taskStatus',
      afterDatasetsDraw(chart, args, pluginOptions) {
        const {ctx, data, chartArea: {top, bottom, left, right}, scales: {x, y}} = chart;
        ctx.font = 'bolder 16px FontAwesome';
        ctx.textBaseline = 'middle';
        const icons = ['\uf00d', '\uf110', '\uf00c'];
        const angle = Math.PI/180;
        let temp = 0;
        data.datasets[0].data.forEach((Tasks, index) => {
          if(Tasks.Status === "Not Started"){
            temp = 0;
          }
          else if (Tasks.Status === "In Progress"){
            temp = 1;
          }
          else{
            temp = 2;
          }
          ctx.beginPath();
          ctx.fillStyle = colours[temp];
          ctx.arc(right + 36.5, y.getPixelForValue(index), 14, 0, angle * 360, false);
          ctx.closePath();
          ctx.fill();

          ctx.fillStyle = 'white';
          ctx.fillText(icons[temp], right + 30, y.getPixelForValue(index));
        });
        ctx.font = 'bolder 12px sans-serif';
        ctx.fillStyle = 'black';
        ctx.fillText('Status', right + 20, top - 15);
        ctx.restore();
      }
    };

    const config = {
      type: 'bar',
      data,
      options: {
        layout: {
          padding: {
            left: 100,
            right: 100
          }
        },
        indexAxis: 'y',
        scales: {
          x: {
            position: 'top',
            type: 'time',
            time: {
              unit: 'day'
            },
            min: '2023-12-01',
            max: '2023-12-31'
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      },
      plugins: [currentday, assignedName, taskStatus]
    };

    // Render the initial chart
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );

    // Function to update the chart data
    function chartupdate() {
      data.datasets[0].data = [];
      data.datasets[0].backgroundColor = [];

      for (let i = 0; i < globalTasksArray.length; i++) {
        data.datasets[0].data.push({
          x: [globalTasksArray[i].assignedTo, globalTasksArray[i].dueDate],
          y: globalTasksArray[i].name,
          name: globalTasksArray[i].personName,
          Status: globalTasksArray[i].status
        });
      }

      let tempColor = 0;
      for (let i = 0; i < globalTasksArray.length; i++) {
        if (globalTasksArray[i].status === "Not Started") {
          tempColor = 0;
        } else if (globalTasksArray[i].status === "In Progress") {
          tempColor = 1;
        } else {
          tempColor = 2;
        }
        data.datasets[0].backgroundColor.push(colours[tempColor]);
      }

      // Update the chart with the new data
      myChart.update();
    }
    chartupdate();

  </script>
</body>
</html>